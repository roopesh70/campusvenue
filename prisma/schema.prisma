// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venue {
  id        String    @id @default(cuid())
  name      String
  type      VenueType
  capacity  Int
  equipment String[]
  building  String
  floor     Int
  imageUrl  String
  bookings  Booking[]
}

model Booking {
  id          String        @id @default(cuid())
  eventName   String
  eventDetails String
  date        DateTime
  timeSlot    String // "HH:MM - HH:MM"
  status      BookingStatus @default(PENDING)
  documentUrl String?
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  STUDENT
  CLUB_LEADER
  FACULTY
  ADMIN
}

enum VenueType {
  HALL
  LAB
  CLASSROOM
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  MAINTENANCE
}
